enum StatusMenu {
  Active
  Inactive
  Deleted
}

enum StatusOrder {
  OrderPlaced
  Picking
  Delivery
  Delivered
}

type Food {
  name: String
  quantity: Int
  ordered: Int
}

type UserAddress
@model
@auth(
  rules: [
    { allow: public }
    # { allow: public, provider: iam, operations: [read] }
    # { allow: private, operations: [read] }
    # { allow: owner, operations: [create, delete, update, read] }
  ]
)
{
  id: ID!
  userID: ID! @index(name: "byUserID", sortKeyFields: ["email"], queryField: "getUserAddressByUserID")
  email: String! @index(name: "byEmail", sortKeyFields: ["userID"], queryField: "getUserByEmail")
  address1: String
  address2: String
  address3: String
}

type Menu
@model
@auth(
  rules: [
    { allow: public }
    # { allow: public, provider: iam, operations: [read] }
    # { allow: private, operations: [read] }
    # { allow: owner, operations: [create, delete, update, read] }
  ]
)
{
  id: ID!
  week: AWSDateTime!
  entree: Food
  mainMeal: Food
  dessert: Food
  statusMenu: StatusMenu! @index(name: "byStatusMenu", sortKeyFields: ["week"], queryField: "getMenuByStatusMenu")
}

type Order
@model
@auth(
  rules: [
    { allow: public }
    # { allow: public, provider: iam, operations: [read] }
    # { allow: private, operations: [read] }
    # { allow: owner, operations: [create, delete, update, read] }
  ]
)
{
  id: ID!
  userID: ID! @index(name: "byUserID", sortKeyFields: ["id"], queryField: "getMenuByUserID")
  menuID: ID!
  userAddressID: ID!
  orderTime: AWSDateTime!
  entree: Food
  mainMeal: Food
  dessert: Food
  statusOrder: StatusOrder
  deliveryAddress: String
  menu: Menu @hasOne
  userAddress: UserAddress @hasOne
}

type Mutation {
	runPrepareFoods(data: AWSJSON): AWSJSON @function(name: "runPrepareFoods-dev"),
  sendMailErrorToAdmin(data: AWSJSON): AWSJSON @function(name: "sendMailErrorToAdmin-dev")
}
