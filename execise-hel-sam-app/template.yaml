AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  execise-hel-sam-app

  Sample SAM Template for execise-hel-sam-app

Resources:
  PrepareFoodsStepFunction:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: step-functions/prepare-foods/prepare_foods.json
      DefinitionSubstitutions:
        ChangePickingToDeliveryFunctionArn: !GetAtt ChangePickingToDeliveryFunction.Arn
        SendMailToMemberFunctionArn: !GetAtt SendMailToMemberFunction.Arn
      Events:
        HourlyTradingSchedule:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the stock trading state machine every hour
            Enabled: False # This schedule is disabled by default to avoid incurring charges.
            Schedule: "rate(1 hour)"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref ChangePickingToDeliveryFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SendMailToMemberFunction

  ChangePickingToDeliveryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/change-picking-to-delivery/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Role:
        Fn::GetAtt:
          - PrepareFoodsFunctionExecutionRole
          - Arn

  SendMailToMemberFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/send-mail-to-member/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Role:
        Fn::GetAtt:
          - PrepareFoodsFunctionExecutionRole
          - Arn

  EventHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/event-handler
      Handler: app.lambdaHandler
      Runtime: nodejs14.x

  PrepareFoodsFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  PrepareFoodsLambdaExecutionPolicy:
    DependsOn:
      - PrepareFoodsFunctionExecutionRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: prepare-foods-lambda-execution-policy
      Roles:
        - Ref: PrepareFoodsFunctionExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - Fn::Sub:
                  - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                  - region:
                      Ref: AWS::Region
                    account:
                      Ref: AWS::AccountId
                    lambda:
                      Ref: ChangePickingToDeliveryFunction
              - Fn::Sub:
                  - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                  - region:
                      Ref: AWS::Region
                    account:
                      Ref: AWS::AccountId
                    lambda:
                      Ref: SendMailToMemberFunction
          - Action:
              - 'dynamodb:Query'
              - 'dynamodb:GetItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:PutItem'
            Effect: Allow
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"

  # PrepareFoodsStepFunctionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #             - !Sub "states.${AWS::Region}.amazonaws.com"
  #         Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: "PrepareFoodsEngineCallLambdaFunctions"
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "lambda:InvokeFunction"
  #               Resource:
  #                 - !Sub ${ChangePickingToDeliveryFunction.Arn}
  #                 - !Sub ${SendMailToMemberFunction.Arn}

Outputs:
  PrepareFoodsStepFunctionArn:
    Description: 'Prepare foods step function ARN'
    Value: !Ref PrepareFoodsStepFunction
  PrepareFoodsStepFunctionRole:
    Description: 'IAM Role created for prepare foods step function based on the specified SAM Policy Templates'
    Value: !GetAtt PrepareFoodsStepFunctionRole.Arn
